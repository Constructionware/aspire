{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Aspire\u00ae Aspire is a lightweight fully production ready pure Python ASGI web application framework and tool belt, built with the latest cool web technologies to make creating and deploying simple to large scale complex web applications less difficult. from aspire import API app = API() # Initialize an Application @app.route('/') def index(req, response): response.text = \"Hello, World!\" if __name__ == '__main__': app.run() $ aspire serve appName * Serving Aspire Application appName * Running on http://127.0.0.1:1090/ (CTRL + C to quit) A fork of Kenneth Reitz Responder | Inspired by Pallets Flask and Tom Christie,s Starlette For full documentation visit mkdocs.org . Cli mkdir my-cool-projects - Create a new project directory. cd my-cool-projects - home/my-cool-projects/ aspire create_api myCoolApi - Create a new skeleton REST Api called myCoolApi. aspire create_app myCoolApp - Create a new skeleton Web project called myCoolApp. cd myCoolApi - home/my-cool-projects/myCoolApi/ cd myCoolApp - home/my-cool-projects/myCoolApp/ aspire serve - Start the server in development mode with live-reloading and dev tools. aspire build - Build the a deployable production ready application with dev mode off. aspire run - Runs a Built application in Production mode on the Host Machine. aspire -h - For Help. aspire --v - Current version aspire default to port 1090 | point your browser at localhost:1090 Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#aspire","text":"Aspire is a lightweight fully production ready pure Python ASGI web application framework and tool belt, built with the latest cool web technologies to make creating and deploying simple to large scale complex web applications less difficult. from aspire import API app = API() # Initialize an Application @app.route('/') def index(req, response): response.text = \"Hello, World!\" if __name__ == '__main__': app.run() $ aspire serve appName * Serving Aspire Application appName * Running on http://127.0.0.1:1090/ (CTRL + C to quit) A fork of Kenneth Reitz Responder | Inspired by Pallets Flask and Tom Christie,s Starlette For full documentation visit mkdocs.org .","title":"Aspire&reg;"},{"location":"#cli","text":"mkdir my-cool-projects - Create a new project directory. cd my-cool-projects - home/my-cool-projects/ aspire create_api myCoolApi - Create a new skeleton REST Api called myCoolApi. aspire create_app myCoolApp - Create a new skeleton Web project called myCoolApp. cd myCoolApi - home/my-cool-projects/myCoolApi/ cd myCoolApp - home/my-cool-projects/myCoolApp/ aspire serve - Start the server in development mode with live-reloading and dev tools. aspire build - Build the a deployable production ready application with dev mode off. aspire run - Runs a Built application in Production mode on the Host Machine. aspire -h - For Help. aspire --v - Current version aspire default to port 1090 | point your browser at localhost:1090","title":"Cli"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"About Aspire The Motivation behind rolling our own server customised with all the niceties of getting complex tasks done in a simple, productive and reliable way arose from failing dependencies nightmare as a result of developers applying updates to their software's dependencies late or un-maintained packages . Aspire seeks to address this issue by relying heavily on pure python system modules implementation and packaging a vast portion of its dependencies on board, kind of like \"Batteries included\". Packaged dependencies are well curated removing any unused or heavy imports, redundant codes and unesseary bloat, optimising and improving code quality. import os def get_path(): path = os.path.abspath(__file__) return path In the above implementation the entire \"os\" moule is imported into memory, this is repeated multiple times throught some code base. resulting in unnessesary cpu loads, a heavier memory usage and eventually slower code performance. from os.path import abspath def get_path(): return abspath(__file__) Optimising our dependents We dropped the entire os import and opted for a tiny portion with a direct import of its sub module. we depricated the memory waste variable \"path\" and return the result directly. Allbe it we get a faster executing code with vastly reduced memory footprint. The result is a much more agile, stable and reliable application with a longer operablee lifespan between updates and an apperciated reduction in memory footprint both on the host and in runtime.","title":"About Aspire"},{"location":"about/#about-aspire","text":"The Motivation behind rolling our own server customised with all the niceties of getting complex tasks done in a simple, productive and reliable way arose from failing dependencies nightmare as a result of developers applying updates to their software's dependencies late or un-maintained packages . Aspire seeks to address this issue by relying heavily on pure python system modules implementation and packaging a vast portion of its dependencies on board, kind of like \"Batteries included\". Packaged dependencies are well curated removing any unused or heavy imports, redundant codes and unesseary bloat, optimising and improving code quality. import os def get_path(): path = os.path.abspath(__file__) return path In the above implementation the entire \"os\" moule is imported into memory, this is repeated multiple times throught some code base. resulting in unnessesary cpu loads, a heavier memory usage and eventually slower code performance. from os.path import abspath def get_path(): return abspath(__file__) Optimising our dependents We dropped the entire os import and opted for a tiny portion with a direct import of its sub module. we depricated the memory waste variable \"path\" and return the result directly. Allbe it we get a faster executing code with vastly reduced memory footprint. The result is a much more agile, stable and reliable application with a longer operablee lifespan between updates and an apperciated reduction in memory footprint both on the host and in runtime.","title":"About Aspire"},{"location":"license/license/","text":"MIT","title":"License"},{"location":"license/license/#mit","text":"","title":"MIT"},{"location":"user-guide/configuration-options/","text":"Configuration","title":"Configuration"},{"location":"user-guide/configuration-options/#configuration","text":"","title":"Configuration"},{"location":"user-guide/first-app/","text":"","title":"Creating Your First Application"},{"location":"user-guide/getting-started/","text":"Getting Started Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Getting Started"},{"location":"user-guide/getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"user-guide/getting-started/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"}]}